$darken-ratio: 10% !default;
$color-main: #F05962 !default;
$color-main-pale: #F05962!default;
$color-main-deep: #F05962!default;

$color-accent :#F05962 !default;
$color-accent-pale: #F05962 !default;
$color-accent-deep :#F05962!default;

$theme-map:/**/ ( //
/**/ main-light: $color-main, //
/**/ main-dark: darken($color-main,$darken-ratio), //
/**/ main-pale-light: $color-main-pale, //
/**/ main-pale-dark: darken($color-main-pale,$darken-ratio), //
/**/ main-deep-light: $color-main-deep, //
/**/ main-deep-dark: darken($color-main-deep,$darken-ratio), //
/**/ accent-light: $color-accent, //
/**/ accent-dark: darken($color-accent,$darken-ratio), //
/**/ accent-pale-light: $color-accent-pale, //
/**/ accent-pale-dark: darken($color-accent-pale,$darken-ratio), //
/**/ accent-deep-light: $color-accent-deep, //
/**/ accent-deep-dark: darken($color-accent-deep,$darken-ratio), //
/**/
/**/ white-light: #fff, //
/**/ white-dark: darken(#fff,$darken-ratio), //
/**/
/**/ primary-light: rgba(#000,0.87), //
/**/ primary-dark: rgba(#fff,1), //
/**/ secondary-light: rgba(#000,0.54), //
/**/ secondary-dark: rgba(#fff,0.7), //
/**/ thirdly-light: rgba(#000,0.38), //
/**/ thirdly-dark: rgba(#000,0.3), //
/**/
/**/ divide-light: rgba(#000, 0.12), //
/**/ divide-dark: rgba(#fff, 0.12), //
/**/ divide-white-light: rgba(#fff, 0.36), //
/**/ divide-white-dark: darken(rgba(#fff, 0.36),$darken-ratio), //
/**/
/**/ floor-light: #fafafa, //
/**/ floor-dark: #1E1E1E, //
/**/ panel-light: #fafafa, //
/**/ panel-dark: #303030, //
/**/ component-light: #fff, //
/**/ component-dark: #414141, //
/**/ transparent-light:transparent,
/**/ transparent-dark:transparent,
/**/
/**/ success-light: #6BD37C, //
/**/ success-dark:darken(#6BD37C,$darken-ratio), //
/**/ warn-light: #FFC107, //
/**/ warn-dark:darken(#FFC107,$darken-ratio), //
/**/ error-light: #F44336, //
/**/ error-dark:darken(#F44336,$darken-ratio), //
/**/
/**/ selected-pale-light:rgba(#000,0.08), //
/**/ selected-pale-dark:rgba(#fff,0.08), //
/**/ selected-light:rgba(#000,0.12), //
/**/ selected-dark:rgba(#fff,0.12), //
/**/
/**/ cloak-light:rgba(#000,0.5),
/**/ cloak-dark:rgba(#fff,0.5),
/**/
/**/ level-1-light: 0px 1px 2px rgba(#000,0.22), //
/**/ level-1-dark:0px 1px 2px rgba(#000,0.56), //
/**/ level-2-light: 0px 1px 5px rgba(#000,0.22), //
/**/ level-2-dark:0px 1px 5px rgba(#000,0.56), //
/**/ level-3-light: 0px 1px 8px rgba(#000,0.22), //
/**/ level-3-dark:0px 1px 8px rgba(#000,0.56), //
/**/ level-4-light: 0px 1px 12px rgba(#000,0.22), //
/**/ level-4-dark:0px 1px 12px rgba(#000,0.56) //
);


$disabled-opacity: 0.6 !default;

$themes: light dark;
$colors: #{'white'} primary secondary thirdly success warn error main main-deep main-pale accent accent-deep accent-pale;
$backgrounds: panel component success warn error main main-deep main-pale accent accent-deep accent-pale selected-pale selected cloak #{'transparent'};
$divide-positions: all top right bottom left;
$divide-styles: solid dashed dotted;
$levels: 1 2 3 4 5;

//-----------------------------------
@for $theme from 1 through length($themes) {
    .theme-#{nth($themes,$theme)} {
        @at-root body#{&} {
            background-color: map-get($theme-map, "floor-#{nth($themes,$theme)}")
        }

        @for $color from 1 through length($colors) {
            .mp-theme-color-#{nth($colors,$color)} {
                color: map-get($theme-map, "#{nth($colors,$color)}-#{nth($themes,$theme)}");
            }

            .mp-theme-hover-color-#{nth($colors,$color)} {
                transition: color .18s ease;

                &:hover {
                    transition: color .25s ease;
                    color: map-get($theme-map, "#{nth($colors,$color)}-#{nth($themes,$theme)}");
                }
            }
        }

        @for $background from 1 through length($backgrounds) {
            .mp-theme-background-#{nth($backgrounds,$background)} {
                background-color: map-get($theme-map, "#{nth($backgrounds,$background)}-#{nth($themes,$theme)}");
            }

            .mp-theme-active-background-#{nth($backgrounds,$background)} {
                &.active {
                    background-color: map-get($theme-map, "#{nth($backgrounds,$background)}-#{nth($themes,$theme)}") !important;
                }
            }

            .mp-theme-hover-background-#{nth($backgrounds,$background)} {
                transition: background-color .18s ease;

                &:hover {
                    transition: background-color .25s ease;
                    background-color: map-get($theme-map, "#{nth($backgrounds,$background)}-#{nth($themes,$theme)}") !important;
                }
            }
        }

        @for $divide-position from 1 through length($divide-positions) {
            @for $divide-style from 1 through length($divide-styles) {
                $position: nth($divide-positions, $divide-position);
                $style: nth($divide-styles, $divide-style);

                .mp-theme-divide-#{$position}-#{$style} {
                    @if $position=='all' {
                        border-width: 1px;
                        border-style: $style;
                        border-color: map-get($theme-map, "divide-#{nth($themes,$theme)}");
                    }

                    @else {
                        border-#{$position}-width: 1px;
                        border-#{$position}-style: $style;
                        border-#{$position}-color: map-get($theme-map, "divide-#{nth($themes,$theme)}");
                    }
                }

                .mp-theme-divide-#{$position}-#{$style}-not-last {
                    &:not(:last-child) {
                        @if $position=='all' {
                            border-width: 1px;
                            border-style: $style;
                            border-color: map-get($theme-map, "divide-#{nth($themes,$theme)}");
                        }

                        @else {
                            border-#{$position}-width: 1px;
                            border-#{$position}-style: $style;
                            border-#{$position}-color: map-get($theme-map, "divide-#{nth($themes,$theme)}");
                        }
                    }
                }
            }
        }

        @for $level from 1 to length($levels) {
            .mp-theme-level-#{$level} {
                box-shadow: map-get($theme-map, "level-#{nth($levels,$level)}-#{nth($themes,$theme)}");
            }

            .mp-theme-level-#{$level}-fliter {
                filter: drop-shadow(map-get($theme-map, "level-#{nth($levels,$level)}-#{nth($themes,$theme)}"));
            }

            .mp-theme-hover-level-#{$level} {
                &:hover {
                    box-shadow: map-get($theme-map, "level-#{nth($levels,$level)}-#{nth($themes,$theme)}");
                    transition: box-shadow 0.15s ease;
                }
            }

            .mp-theme-hover-level-#{$level}-fliter {
                transition: background-color .18s ease;

                &:hover {
                    filter: drop-shadow(map-get($theme-map, "level-#{nth($levels,$level)}-#{nth($themes,$theme)}"));
                    transition: box-shadow 0.25s ease;
                }
            }
        }
    }
}
